# -*- coding: utf-8 -*-
"""churn_rediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fOftzBX82i78-CpQ6BZi26DbsLgY7VPI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc

# ==============================
# 1Ô∏è‚É£ Data Loading
# ==============================
file_path = "churn_data.csv"
df = pd.read_csv(file_path)
print("‚úÖ Dataset Loaded Successfully")
print(df.head())

# ==============================
# 3Ô∏è‚É£ Encoding Categorical Columns
# ==============================
le = LabelEncoder()
categorical_cols = df.select_dtypes(include=['object']).columns

for col in categorical_cols:
    if col != 'Churn':
        df[col] = le.fit_transform(df[col])

# Encode target
if df['Churn'].dtype == 'object':
    df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

print("\n‚úÖ Encoded Data:\n", df.head())

# ==============================
# 4Ô∏è‚É£ Feature/Target Split
# ==============================
X = df.drop('Churn', axis=1)
y = df['Churn']

# ==============================
# 5Ô∏è‚É£ Train-Test Split
# ==============================
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ==============================
# 6Ô∏è‚É£ Scaling
# ==============================
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ==============================
# 7Ô∏è‚É£ Model Training
# ==============================
model = GradientBoostingClassifier(n_estimators=150, max_depth=10, random_state=42)
model.fit(X_train_scaled, y_train)

# ==============================
# 8Ô∏è‚É£ Prediction & Evaluation
# ==============================
y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("\n‚úÖ Model Evaluation")
print(f"Accuracy: {accuracy:.2f}")
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", report)

# ==============================
# 9Ô∏è‚É£ Feature Importance Plot
# ==============================
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis')
plt.title('Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()

# ==============================
# üîü ROC Curve
# ==============================
y_prob = model.predict_proba(X_test_scaled)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

# ==============================
# 11Ô∏è‚É£ Churn Analysis Pie Chart
# ==============================
churn_counts = df['Churn'].value_counts()
labels = ['Continued', 'Churned']
colors = ['#2ecc71', '#e74c3c']

plt.figure(figsize=(6, 6))
plt.pie(churn_counts, labels=labels, autopct='%1.1f%%', colors=colors, startangle=140)
plt.title("Churn vs Continued Subscription", fontsize=14)
plt.show()

print("\n‚úÖ Analysis Completed Successfully")