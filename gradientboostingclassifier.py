# -*- coding: utf-8 -*-
"""GradientBoostingClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C2tNYloa-ntXhN3_1W5bUodIb5JaaSl3
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('mushrooms.csv')
data

data.info()

data.describe()

data.head()

data.isnull().sum()



data.ndim

data.shape

data.size

data.dropna

import seaborn as sns
sns.set(style="whitegrid")
plt.figure(figsize=(8, 5))
sns.countplot(x='class', data=data, palette='Set2')


plt.title('Distribution of Edible vs Poisonous Mushrooms', fontsize=14)
plt.xlabel('Class (e = Edible, p = Poisonous)', fontsize=12)
plt.ylabel('Count', fontsize=12)


plt.tight_layout()
plt.show()

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import  LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

data = pd.read_csv("mushrooms.csv")

label_encoders = {}
for col in data.columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

x = data.drop(['class'],axis=1)
y=data['class']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model = GradientBoostingClassifier(n_estimators=100,max_depth=3,learning_rate=0.1,random_state=42)
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

y_pred

accuracy_score = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy_score)

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Actual vs. Predicted Values")
plt.grid(True)
plt.show()

